---
# tasks file for vmware-sync

  - debug: msg="{{ config_file }}"
  - stat: path="{{ config_file }}"
    register: st
  - include_vars: "{{ config_file }}"
    when: st.stat.exists and st.stat.isreg
  - name: "Print out clouds variable"
    debug: msg="{{ clouds|default('No clouds found') }}"

  - name: Generate  UUID
    shell: openssl rand -hex 2
    register: uuid_list
    with_sequence: start=1 end="{{ count }}"
  - name: create the VM
    vmware_guest:
      hostname: "{{ vcenter_ip }}"
      username: "{{ vcenter_user }}"
      password: "{{ vcenter_pass }}"
      validate_certs: no
      esxi_hostname: "{{ esx_host }}"
      datacenter: "{{ vc_datacenter }}"
      name: "{{ vm_name }}-{{ item.stdout }}"
      state: poweredon
      disk:
      - size_gb: 50
        type: thin
        datastore: "{{ vc_datastore }}"
      - size_gb: 50
        type: thin
        datastore: "{{ vc_datastore }}"
      hardware:
        memory_mb: "{{ vm_memory * 1024 }}"
        num_cpus: "{{ vm_cpu }}"
      template: "{{ template_name }}"
      networks:
      - name: VM Network
        type: static
        ip: 192.168.1.123
        netmask: 255.255.0.0
        gateway: 192.168.0.2
        domain: example.com
        dns_servers:
        - 192.168.0.11
        - 192.168.0.1
      - name: VM Network
        type: static      
        ip: 192.168.1.124
        netmask: 255.255.0.0
        gateway: 192.168.0.2
        domain: example.com
        dns_servers:
        - 192.168.0.11
        - 192.168.0.1        
      customization:
        runonce: 
        - hostnamectl set-hostname "{{ vm_name }}"-"{{ item.stdout }}"."{{ domain }}"
      wait_for_ip_address: yes
    delegate_to: localhost
    register: deploy
    with_items: "{{ uuid_list.results }}"

  - name: Debugging instance info
    debug: var=deploy.results[0]